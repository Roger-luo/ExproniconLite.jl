
    #= none:1 =# Core.@doc "    is_valid_typevar(typevar)\n\nCheck if the given typevar is a valid typevar.\n\n!!! note\n    This function is based on [this discourse post](https://discourse.julialang.org/t/what-are-valid-type-parameters/471).\n" function is_valid_typevar(typevar)
            let
                true
                var"##return#225" = nothing
                var"##227" = typevar
                if var"##227" isa TypeVar
                    begin
                        var"##return#225" = let
                                true
                            end
                        $(Expr(:symbolicgoto, Symbol("####final#226#228")))
                    end
                end
                if var"##227" isa QuoteNode
                    begin
                        var"##return#225" = let
                                true
                            end
                        $(Expr(:symbolicgoto, Symbol("####final#226#228")))
                    end
                end
                if var"##227" isa Type
                    begin
                        var"##return#225" = let
                                true
                            end
                        $(Expr(:symbolicgoto, Symbol("####final#226#228")))
                    end
                end
                if isbitstype(typeof(typevar))
                    var"##return#225" = let
                            true
                        end
                    $(Expr(:symbolicgoto, Symbol("####final#226#228")))
                end
                if var"##227" isa Tuple
                    var"##return#225" = let
                            all((x->begin
                                        x isa Symbol || isbitstype(typeof(x))
                                    end), typevar)
                        end
                    $(Expr(:symbolicgoto, Symbol("####final#226#228")))
                end
                begin
                    var"##return#225" = let
                            false
                        end
                    $(Expr(:symbolicgoto, Symbol("####final#226#228")))
                end
                error("matching non-exhaustive, at #= none:10 =#")
                $(Expr(:symboliclabel, Symbol("####final#226#228")))
                var"##return#225"
            end
        end
    #= none:20 =# Core.@doc "    is_literal(x)\n\nCheck if `x` is a literal value.\n" function is_literal(x)
            !(x isa Expr || (x isa Symbol || x isa GlobalRef))
        end
    #= none:29 =# Core.@doc "    is_tuple(ex)\n\nCheck if `ex` is a tuple expression, i.e. `:((a,b,c))`\n" is_tuple(x) = begin
                Meta.isexpr(x, :tuple)
            end
    #= none:36 =# Core.@doc "    is_splat(ex)\n\nCheck if `ex` is a splat expression, i.e. `:(f(x)...)`\n" is_splat(x) = begin
                Meta.isexpr(x, :...)
            end
    #= none:43 =# Core.@doc "    is_gensym(s)\n\nCheck if `s` is generated by `gensym`.\n\n!!! note\n    Borrowed from [MacroTools](https://github.com/FluxML/MacroTools.jl).\n" is_gensym(s::Symbol) = begin
                occursin("#", string(s))
            end
    is_gensym(s) = begin
            false
        end
    #= none:54 =# Core.@doc "    support_default(f)\n\nCheck if field type `f` supports default value.\n" support_default(f) = begin
                false
            end
    support_default(f::JLKwField) = begin
            true
        end
    #= none:62 =# Core.@doc "    has_symbol(ex, name::Symbol)\n\nCheck if `ex` contains symbol `name`.\n" function has_symbol(#= none:67 =# @nospecialize(ex), name::Symbol)
            ex isa Symbol && return ex === name
            ex isa Expr || return false
            return any((x->begin
                            has_symbol(x, name)
                        end), ex.args)
        end
    #= none:73 =# Core.@doc "    has_kwfn_constructor(def[, name = struct_name_plain(def)])\n\nCheck if the struct definition contains keyword function constructor of `name`.\nThe constructor name to check by default is the plain constructor which does\nnot infer any type variables and requires user to input all type variables.\nSee also [`struct_name_plain`](@ref).\n" function has_kwfn_constructor(def, name = struct_name_plain(def))
            any(def.constructors) do fn::JLFunction
                isempty(fn.args) && fn.name == name
            end
        end
    #= none:87 =# Core.@doc "    has_plain_constructor(def, name = struct_name_plain(def))\n\nCheck if the struct definition contains the plain constructor of `name`.\nBy default the name is the inferable name [`struct_name_plain`](@ref).\n\n# Example\n\n```julia\ndef = @expr JLKwStruct struct Foo{T, N}\n    x::Int\n    y::N\n\n    Foo{T, N}(x, y) where {T, N} = new{T, N}(x, y)\nend\n\nhas_plain_constructor(def) # true\n\ndef = @expr JLKwStruct struct Foo{T, N}\n    x::T\n    y::N\n\n    Foo(x, y) = new{typeof(x), typeof(y)}(x, y)\nend\n\nhas_plain_constructor(def) # false\n```\n\nthe arguments must have no type annotations.\n\n```julia\ndef = @expr JLKwStruct struct Foo{T, N}\n    x::T\n    y::N\n\n    Foo{T, N}(x::T, y::N) where {T, N} = new{T, N}(x, y)\nend\n\nhas_plain_constructor(def) # false\n```\n" function has_plain_constructor(def, name = struct_name_plain(def))
            any(def.constructors) do fn::JLFunction
                fn.name == name || return false
                fn.kwargs === nothing || return false
                length(def.fields) == length(fn.args) || return false
                for (f, x) = zip(def.fields, fn.args)
                    f.name === x || return false
                end
                return true
            end
        end
    #= none:140 =# Core.@doc "    is_function(def)\n\nCheck if given object is a function expression.\n" function is_function(#= none:145 =# @nospecialize(def))
            let
                begin
                    var"##cache#232" = nothing
                end
                var"##return#229" = nothing
                var"##231" = def
                if var"##231" isa Expr
                    if begin
                                if var"##cache#232" === nothing
                                    var"##cache#232" = Some(((var"##231").head, (var"##231").args))
                                end
                                var"##233" = (var"##cache#232").value
                                var"##233" isa (Tuple{Symbol, var2} where var2 <: AbstractArray)
                            end && (var"##233"[1] == :function && (begin
                                        var"##234" = var"##233"[2]
                                        var"##234" isa AbstractArray
                                    end && length(var"##234") === 2))
                        var"##return#229" = let
                                true
                            end
                        $(Expr(:symbolicgoto, Symbol("####final#230#239")))
                    end
                    if begin
                                var"##235" = (var"##cache#232").value
                                var"##235" isa (Tuple{Symbol, var2} where var2 <: AbstractArray)
                            end && (var"##235"[1] == :(=) && (begin
                                        var"##236" = var"##235"[2]
                                        var"##236" isa AbstractArray
                                    end && length(var"##236") === 2))
                        var"##return#229" = let
                                true
                            end
                        $(Expr(:symbolicgoto, Symbol("####final#230#239")))
                    end
                    if begin
                                var"##237" = (var"##cache#232").value
                                var"##237" isa (Tuple{Symbol, var2} where var2 <: AbstractArray)
                            end && (var"##237"[1] == :-> && (begin
                                        var"##238" = var"##237"[2]
                                        var"##238" isa AbstractArray
                                    end && length(var"##238") === 2))
                        var"##return#229" = let
                                true
                            end
                        $(Expr(:symbolicgoto, Symbol("####final#230#239")))
                    end
                end
                if var"##231" isa JLFunction
                    begin
                        var"##return#229" = let
                                true
                            end
                        $(Expr(:symbolicgoto, Symbol("####final#230#239")))
                    end
                end
                begin
                    var"##return#229" = let
                            false
                        end
                    $(Expr(:symbolicgoto, Symbol("####final#230#239")))
                end
                error("matching non-exhaustive, at #= none:146 =#")
                $(Expr(:symboliclabel, Symbol("####final#230#239")))
                var"##return#229"
            end
        end
    #= none:155 =# Core.@doc "    is_kw_function(def)\n\nCheck if a given function definition supports keyword arguments.\n" function is_kw_function(#= none:160 =# @nospecialize(def))
            is_function(def) || return false
            if def isa JLFunction
                return def.kwargs !== nothing
            end
            (_, call, _) = split_function(def)
            let
                begin
                    var"##cache#243" = nothing
                end
                var"##return#240" = nothing
                var"##242" = call
                if var"##242" isa Expr
                    if begin
                                if var"##cache#243" === nothing
                                    var"##cache#243" = Some(((var"##242").head, (var"##242").args))
                                end
                                var"##244" = (var"##cache#243").value
                                var"##244" isa (Tuple{Symbol, var2} where var2 <: AbstractArray)
                            end && (var"##244"[1] == :tuple && (begin
                                        var"##245" = var"##244"[2]
                                        var"##245" isa AbstractArray
                                    end && ((ndims(var"##245") === 1 && length(var"##245") >= 1) && (begin
                                                begin
                                                    var"##cache#247" = nothing
                                                end
                                                var"##246" = var"##245"[1]
                                                var"##246" isa Expr
                                            end && (begin
                                                    if var"##cache#247" === nothing
                                                        var"##cache#247" = Some(((var"##246").head, (var"##246").args))
                                                    end
                                                    var"##248" = (var"##cache#247").value
                                                    var"##248" isa (Tuple{Symbol, var2} where var2 <: AbstractArray)
                                                end && (var"##248"[1] == :parameters && (begin
                                                            var"##249" = var"##248"[2]
                                                            var"##249" isa AbstractArray
                                                        end && (ndims(var"##249") === 1 && length(var"##249") >= 0))))))))
                        var"##return#240" = let
                                true
                            end
                        $(Expr(:symbolicgoto, Symbol("####final#241#259")))
                    end
                    if begin
                                var"##250" = (var"##cache#243").value
                                var"##250" isa (Tuple{Symbol, var2} where var2 <: AbstractArray)
                            end && (var"##250"[1] == :call && (begin
                                        var"##251" = var"##250"[2]
                                        var"##251" isa AbstractArray
                                    end && ((ndims(var"##251") === 1 && length(var"##251") >= 2) && (begin
                                                begin
                                                    var"##cache#253" = nothing
                                                end
                                                var"##252" = var"##251"[2]
                                                var"##252" isa Expr
                                            end && (begin
                                                    if var"##cache#253" === nothing
                                                        var"##cache#253" = Some(((var"##252").head, (var"##252").args))
                                                    end
                                                    var"##254" = (var"##cache#253").value
                                                    var"##254" isa (Tuple{Symbol, var2} where var2 <: AbstractArray)
                                                end && (var"##254"[1] == :parameters && (begin
                                                            var"##255" = var"##254"[2]
                                                            var"##255" isa AbstractArray
                                                        end && (ndims(var"##255") === 1 && length(var"##255") >= 0))))))))
                        var"##return#240" = let
                                true
                            end
                        $(Expr(:symbolicgoto, Symbol("####final#241#259")))
                    end
                    if begin
                                var"##256" = (var"##cache#243").value
                                var"##256" isa (Tuple{Symbol, var2} where var2 <: AbstractArray)
                            end && (var"##256"[1] == :block && (begin
                                        var"##257" = var"##256"[2]
                                        var"##257" isa AbstractArray
                                    end && (length(var"##257") === 3 && begin
                                            var"##258" = var"##257"[2]
                                            var"##258" isa LineNumberNode
                                        end)))
                        var"##return#240" = let
                                true
                            end
                        $(Expr(:symbolicgoto, Symbol("####final#241#259")))
                    end
                end
                begin
                    var"##return#240" = let
                            false
                        end
                    $(Expr(:symbolicgoto, Symbol("####final#241#259")))
                end
                error("matching non-exhaustive, at #= none:168 =#")
                $(Expr(:symboliclabel, Symbol("####final#241#259")))
                var"##return#240"
            end
        end
    #= none:176 =# @deprecate is_kw_fn(def) is_kw_function(def)
    #= none:177 =# @deprecate is_fn(def) is_function(def)
    #= none:179 =# Core.@doc "    is_struct(ex)\n\nCheck if `ex` is a struct expression.\n" function is_struct(#= none:184 =# @nospecialize(ex))
            ex isa Expr || return false
            return ex.head === :struct
        end
    #= none:189 =# Core.@doc "    is_struct_not_kw_struct(ex)\n\nCheck if `ex` is a struct expression excluding keyword struct syntax.\n" function is_struct_not_kw_struct(ex)
            is_struct(ex) || return false
            body = ex.args[3]
            body isa Expr && body.head === :block || return false
            any(is_field_default, body.args) && return false
            return true
        end
    #= none:202 =# Core.@doc "    is_ifelse(ex)\n\nCheck if `ex` is an `if ... elseif ... else ... end` expression.\n" function is_ifelse(#= none:207 =# @nospecialize(ex))
            ex isa Expr || return false
            return ex.head === :if
        end
    #= none:212 =# Core.@doc "    is_for(ex)\n\nCheck if `ex` is a `for` loop expression.\n" function is_for(#= none:217 =# @nospecialize(ex))
            ex isa Expr || return false
            return ex.head === :for
        end
    #= none:222 =# Core.@doc "    is_field(ex)\n\nCheck if `ex` is a valid field expression.\n" function is_field(#= none:227 =# @nospecialize(ex))
            let
                begin
                    var"##cache#263" = nothing
                end
                var"##return#260" = nothing
                var"##262" = ex
                if var"##262" isa Expr
                    if begin
                                if var"##cache#263" === nothing
                                    var"##cache#263" = Some(((var"##262").head, (var"##262").args))
                                end
                                var"##264" = (var"##cache#263").value
                                var"##264" isa (Tuple{Symbol, var2} where var2 <: AbstractArray)
                            end && (var"##264"[1] == :(=) && (begin
                                        var"##265" = var"##264"[2]
                                        var"##265" isa AbstractArray
                                    end && (length(var"##265") === 2 && (begin
                                                begin
                                                    var"##cache#267" = nothing
                                                end
                                                var"##266" = var"##265"[1]
                                                var"##266" isa Expr
                                            end && (begin
                                                    if var"##cache#267" === nothing
                                                        var"##cache#267" = Some(((var"##266").head, (var"##266").args))
                                                    end
                                                    var"##268" = (var"##cache#267").value
                                                    var"##268" isa (Tuple{Symbol, var2} where var2 <: AbstractArray)
                                                end && (var"##268"[1] == :(::) && (begin
                                                            var"##269" = var"##268"[2]
                                                            var"##269" isa AbstractArray
                                                        end && (length(var"##269") === 2 && begin
                                                                var"##270" = var"##269"[1]
                                                                var"##271" = var"##269"[2]
                                                                var"##272" = var"##265"[2]
                                                                true
                                                            end))))))))
                        var"##return#260" = let default = var"##272", type = var"##271", name = var"##270"
                                false
                            end
                        $(Expr(:symbolicgoto, Symbol("####final#261#281")))
                    end
                    if begin
                                var"##273" = (var"##cache#263").value
                                var"##273" isa (Tuple{Symbol, var2} where var2 <: AbstractArray)
                            end && (var"##273"[1] == :(=) && (begin
                                        var"##274" = var"##273"[2]
                                        var"##274" isa AbstractArray
                                    end && (length(var"##274") === 2 && (begin
                                                var"##275" = var"##274"[1]
                                                var"##275" isa Symbol
                                            end && begin
                                                var"##276" = var"##274"[2]
                                                true
                                            end))))
                        var"##return#260" = let default = var"##276", name = var"##275"
                                false
                            end
                        $(Expr(:symbolicgoto, Symbol("####final#261#281")))
                    end
                    if begin
                                var"##277" = (var"##cache#263").value
                                var"##277" isa (Tuple{Symbol, var2} where var2 <: AbstractArray)
                            end && (var"##277"[1] == :(::) && (begin
                                        var"##278" = var"##277"[2]
                                        var"##278" isa AbstractArray
                                    end && (length(var"##278") === 2 && begin
                                            var"##279" = var"##278"[1]
                                            var"##280" = var"##278"[2]
                                            true
                                        end)))
                        var"##return#260" = let type = var"##280", name = var"##279"
                                true
                            end
                        $(Expr(:symbolicgoto, Symbol("####final#261#281")))
                    end
                end
                if var"##262" isa Symbol
                    begin
                        var"##return#260" = let name = var"##262"
                                true
                            end
                        $(Expr(:symbolicgoto, Symbol("####final#261#281")))
                    end
                end
                begin
                    var"##return#260" = let
                            false
                        end
                    $(Expr(:symbolicgoto, Symbol("####final#261#281")))
                end
                error("matching non-exhaustive, at #= none:228 =#")
                $(Expr(:symboliclabel, Symbol("####final#261#281")))
                var"##return#260"
            end
        end
    #= none:237 =# Core.@doc "    is_field_default(ex)\n\nCheck if `ex` is a `<field expr> = <default expr>` expression.\n" function is_field_default(#= none:242 =# @nospecialize(ex))
            let
                begin
                    var"##cache#285" = nothing
                end
                var"##return#282" = nothing
                var"##284" = ex
                if var"##284" isa Expr
                    if begin
                                if var"##cache#285" === nothing
                                    var"##cache#285" = Some(((var"##284").head, (var"##284").args))
                                end
                                var"##286" = (var"##cache#285").value
                                var"##286" isa (Tuple{Symbol, var2} where var2 <: AbstractArray)
                            end && (var"##286"[1] == :(=) && (begin
                                        var"##287" = var"##286"[2]
                                        var"##287" isa AbstractArray
                                    end && (length(var"##287") === 2 && (begin
                                                begin
                                                    var"##cache#289" = nothing
                                                end
                                                var"##288" = var"##287"[1]
                                                var"##288" isa Expr
                                            end && (begin
                                                    if var"##cache#289" === nothing
                                                        var"##cache#289" = Some(((var"##288").head, (var"##288").args))
                                                    end
                                                    var"##290" = (var"##cache#289").value
                                                    var"##290" isa (Tuple{Symbol, var2} where var2 <: AbstractArray)
                                                end && (var"##290"[1] == :(::) && (begin
                                                            var"##291" = var"##290"[2]
                                                            var"##291" isa AbstractArray
                                                        end && (length(var"##291") === 2 && begin
                                                                var"##292" = var"##291"[1]
                                                                var"##293" = var"##291"[2]
                                                                var"##294" = var"##287"[2]
                                                                true
                                                            end))))))))
                        var"##return#282" = let default = var"##294", type = var"##293", name = var"##292"
                                true
                            end
                        $(Expr(:symbolicgoto, Symbol("####final#283#299")))
                    end
                    if begin
                                var"##295" = (var"##cache#285").value
                                var"##295" isa (Tuple{Symbol, var2} where var2 <: AbstractArray)
                            end && (var"##295"[1] == :(=) && (begin
                                        var"##296" = var"##295"[2]
                                        var"##296" isa AbstractArray
                                    end && (length(var"##296") === 2 && (begin
                                                var"##297" = var"##296"[1]
                                                var"##297" isa Symbol
                                            end && begin
                                                var"##298" = var"##296"[2]
                                                true
                                            end))))
                        var"##return#282" = let default = var"##298", name = var"##297"
                                true
                            end
                        $(Expr(:symbolicgoto, Symbol("####final#283#299")))
                    end
                end
                begin
                    var"##return#282" = let
                            false
                        end
                    $(Expr(:symbolicgoto, Symbol("####final#283#299")))
                end
                error("matching non-exhaustive, at #= none:243 =#")
                $(Expr(:symboliclabel, Symbol("####final#283#299")))
                var"##return#282"
            end
        end
    #= none:250 =# Core.@doc "    is_datatype_expr(ex)\n\nCheck if `ex` is an expression for a concrete `DataType`, e.g\n`where` is not allowed in the expression.\n" function is_datatype_expr(#= none:256 =# @nospecialize(ex))
            let
                begin
                    var"##cache#303" = nothing
                end
                var"##return#300" = nothing
                var"##302" = ex
                if var"##302" isa GlobalRef
                    begin
                        var"##return#300" = let
                                true
                            end
                        $(Expr(:symbolicgoto, Symbol("####final#301#317")))
                    end
                end
                if var"##302" isa Expr
                    if begin
                                if var"##cache#303" === nothing
                                    var"##cache#303" = Some(((var"##302").head, (var"##302").args))
                                end
                                var"##304" = (var"##cache#303").value
                                var"##304" isa (Tuple{Symbol, var2} where var2 <: AbstractArray)
                            end && (var"##304"[1] == :curly && (begin
                                        var"##305" = var"##304"[2]
                                        var"##305" isa AbstractArray
                                    end && (length(var"##305") === 2 && (begin
                                                begin
                                                    var"##cache#307" = nothing
                                                end
                                                var"##306" = var"##305"[2]
                                                var"##306" isa Expr
                                            end && (begin
                                                    if var"##cache#307" === nothing
                                                        var"##cache#307" = Some(((var"##306").head, (var"##306").args))
                                                    end
                                                    var"##308" = (var"##cache#307").value
                                                    var"##308" isa (Tuple{Symbol, var2} where var2 <: AbstractArray)
                                                end && (var"##308"[1] == :... && (begin
                                                            var"##309" = var"##308"[2]
                                                            var"##309" isa AbstractArray
                                                        end && length(var"##309") === 1)))))))
                        var"##return#300" = let
                                true
                            end
                        $(Expr(:symbolicgoto, Symbol("####final#301#317")))
                    end
                    if begin
                                var"##310" = (var"##cache#303").value
                                var"##310" isa (Tuple{Symbol, var2} where var2 <: AbstractArray)
                            end && (var"##310"[1] == :. && (begin
                                        var"##311" = var"##310"[2]
                                        var"##311" isa AbstractArray
                                    end && (length(var"##311") === 2 && (begin
                                                var"##312" = var"##311"[2]
                                                var"##312" isa QuoteNode
                                            end && begin
                                                var"##313" = (var"##312").value
                                                true
                                            end))))
                        var"##return#300" = let b = var"##313"
                                is_datatype_expr(b)
                            end
                        $(Expr(:symbolicgoto, Symbol("####final#301#317")))
                    end
                    if begin
                                var"##314" = (var"##cache#303").value
                                var"##314" isa (Tuple{Symbol, var2} where var2 <: AbstractArray)
                            end && (var"##314"[1] == :curly && (begin
                                        var"##315" = var"##314"[2]
                                        var"##315" isa AbstractArray
                                    end && ((ndims(var"##315") === 1 && length(var"##315") >= 0) && begin
                                            var"##316" = SubArray(var"##315", (1:length(var"##315"),))
                                            true
                                        end)))
                        var"##return#300" = let args = var"##316"
                                all(is_datatype_expr, args)
                            end
                        $(Expr(:symbolicgoto, Symbol("####final#301#317")))
                    end
                end
                if var"##302" isa Symbol
                    begin
                        var"##return#300" = let
                                true
                            end
                        $(Expr(:symbolicgoto, Symbol("####final#301#317")))
                    end
                end
                begin
                    var"##return#300" = let
                            false
                        end
                    $(Expr(:symbolicgoto, Symbol("####final#301#317")))
                end
                error("matching non-exhaustive, at #= none:257 =#")
                $(Expr(:symboliclabel, Symbol("####final#301#317")))
                var"##return#300"
            end
        end
    #= none:267 =# Core.@doc "    is_matrix_expr(ex)\n\nCheck if `ex` is an expression for a `Matrix`.\n" function is_matrix_expr(#= none:272 =# @nospecialize(ex))
            Meta.isexpr(ex, :hcat) && return true
            if Meta.isexpr(ex, :typed_vcat)
                args = ex.args[2:end]
            elseif Meta.isexpr(ex, :vcat)
                args = ex.args
            else
                return false
            end
            for row = args
                Meta.isexpr(row, :row) || return false
            end
            return true
        end
